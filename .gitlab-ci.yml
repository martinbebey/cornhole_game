#stages:          # List of stages for jobs, and their order of execution
#  - build
#  - test
#  - deploy
#
#build-job:       # This job runs in the build stage, which runs first.
#  stage: build
#  script:
#    - echo "Compiling the code..."
#    - echo "Compile complete."
#
#unit-test-job:   # This job runs in the test stage.
#  stage: test    # It only starts when the job in the build stage completes successfully.
#  script:
#    - echo "Running unit tests... This will take about 60 seconds."
#    - sleep 60
#    - echo "Code coverage is 90%"
#
#lint-test-job:   # This job also runs in the test stage.
#  stage: test    # It can run at the same time as unit-test-job (in parallel).
#  script:
#    - echo "Linting code... This will take about 10 seconds."
#    - sleep 10
#    - echo "No lint issues found."
#
#deploy-job:      # This job runs in the deploy stage.
#  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
#  environment: production
#  script:
#    - echo "Deploying application..."
#    - echo "Application successfully deployed."


stages:
  - build
  - test
  - lint
  - instrumented-test
  - deploy
  - release
  - cleanup

variables:
  ANDROID_SDK_ROOT: "$CI_PROJECT_DIR/android-sdk"

before_script:
  - apt-get update
  - apt-get install -y openjdk-17-jdk
  - export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
  - export PATH=$JAVA_HOME/bin:$PATH
  - java -version
  - echo "Installing Android SDK..."
  - mkdir -p $ANDROID_SDK_ROOT
  - cd $ANDROID_SDK_ROOT
  - wget https://dl.google.com/android/repository/commandlinetools-linux-6858069_latest.zip
  - unzip commandlinetools-linux-6858069_latest.zip
  - rm -rf $ANDROID_SDK_ROOT/platform-tools  # Clean up existing installation
  - yes | $ANDROID_SDK_ROOT/cmdline-tools/bin/sdkmanager --sdk_root=$ANDROID_SDK_ROOT --install "platform-tools" "platforms;android-30" "build-tools;30.0.3" || true
  - export PATH=$PATH:$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$ANDROID_SDK_ROOT/platform-tools
  - cd ..
  - echo "Current directory:"
  - pwd
  - echo "Listing contents:"
  - ls -la
  - chmod +x gradlew  # Ensure gradlew is executable

# Build job (compile APK)
build-job:
  stage: build
  script:
    - echo "Starting build process..."
    - ./gradlew clean assembleDebug --no-daemon --parallel --exclude-task lint
    - ./gradlew assembleRelease --no-daemon --parallel --exclude-task lint
    - echo "Build completed successfully."
  artifacts:
    paths:
      - app/build/outputs/**/*.apk
    expire_in: 1 hour
  cache:
    paths:
      - .gradle/caches/
      - .gradle/wrapper/
    key: ${CI_COMMIT_REF_SLUG}

# Unit Test job (JUnit tests for Kotlin code)
unit-test-job:
  stage: test
  script:
    - echo "Running unit tests..."
    - ./gradlew testDebugUnitTest --no-daemon --parallel
    - echo "Unit tests passed."
  dependencies:
    - build-job
  artifacts:
    reports:
      junit: app/build/test-results/**/*.xml
    expire_in: 1 hour
  cache:
    key: ${CI_COMMIT_REF_SLUG}

# Lint job (Android Lint checks)
lint-job:
  stage: lint
  script:
    - echo "Running Android Lint..."
    - ./gradlew lintDebug --no-daemon
    - ./gradlew lintRelease --no-daemon
    - echo "Linting complete."
  dependencies:
    - build-job
  artifacts:
    paths:
      - app/build/reports/lint/
    expire_in: 1 hour
  cache:
    key: ${CI_COMMIT_REF_SLUG}

# Instrumented test job (UI tests with Firebase Test Lab or local device)
instrumented-test-job:
  stage: instrumented-test
  script:
    - echo "Running instrumented tests..."
    - ./gradlew connectedDebugAndroidTest --no-daemon --parallel
    - firebase test lab run --app app/build/outputs/apk/debug/app-debug.apk --test app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk
    - echo "Instrumented tests passed."
  dependencies:
    - build-job
  artifacts:
    reports:
      junit: app/build/test-results/connected/*.xml
    expire_in: 1 hour
  cache:
    key: ${CI_COMMIT_REF_SLUG}

# Deploy job (Deploy to Firebase App Distribution)
deploy-firebase-job:
  stage: deploy
  script:
    - echo "Deploying to Firebase App Distribution..."
    - firebase appdistribution:distribute app/build/outputs/apk/debug/app-debug.apk --app <firebase_app_id> --groups "testers" --token $FIREBASE_AUTH_TOKEN
    - echo "App successfully deployed to Firebase."
  environment: staging
  only:
    - master
  when: manual  # Allow manual trigger
  dependencies:
    - build-job
  artifacts:
    paths:
      - app/build/outputs/**/*.apk
  cache:
    key: ${CI_COMMIT_REF_SLUG}

# Google Play Store Deployment (using Fastlane)
deploy-playstore-job:
  stage: deploy
  script:
    - echo "Deploying to Google Play Store using Fastlane..."
    - bundle exec fastlane android release
    - echo "App successfully deployed to Google Play Store."
  environment: production
  only:
    - master
  dependencies:
    - build-job
  artifacts:
    paths:
      - app/build/outputs/**/*.apk
  cache:
    key: ${CI_COMMIT_REF_SLUG}

# Release job (Tagging and version bumping)
release-job:
  stage: release
  script:
    - echo "Creating release tag..."
    - git tag "v$(date +'%Y%m%d%H%M%S')"
    - git push --tags
    - echo "Release tag created and pushed."
  environment: production
  only:
    - master
  cache:
    key: ${CI_COMMIT_REF_SLUG}

# Cleanup job (Remove build files and other artifacts)
cleanup-job:
  stage: cleanup
  script:
    - echo "Cleaning up build files..."
    - rm -rf app/build/
    - docker system prune -f
    - echo "Cleanup complete."
  only:
    - master

# Cache job (Speed up builds by caching dependencies)
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .gradle/wrapper/
    - .gradle/caches/
  policy: pull-push
